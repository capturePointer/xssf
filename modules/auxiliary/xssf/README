##### HELP ABOUT XSSF MODULES #####


#### OPTIONS ####
Defaults options are defined in class constructor at instanciation. By default, they are unherited from
XSSFServer class. Other options can be added if needed, or existing ones can be modified in each module.

Defaults are : 
'Name'        => 'XSSF MODULE',
'Description' => 'XSSF MODULE',
'Author'      => 'LuDo (CONIX Security)',
'License'     => MSF_LICENSE

Options can be added as follow : 
register_options(
	[
		OptString.new('Option', [true/false, 'Option description'])
	], self.class
)


#### MODULE CREATION ####
To create a module, you just have to modify the "on_request_uri" function. You can send what you want to 
the client using send_response(cli, code, {'Content-Type' => 'text/html'} ). Just construct the code as 
you want it.
In code, different contents can be written :
	- javascript (without <script> tags) : code will be directly sent to the victim
	- html page : iframe will be loaded on the victim side and code inserted in (html can contain javascript)



#### ACCESIBLE JAVASCRIPT FUNCTIONS ####
XSSF_POST(response) : Use this javascript function to send back a message to metasploit. By that way, 
log can be updated on this victim attack.

XSSF_POST(response, module_name) : Same as previous but this one send module name back to metasploit. It's better
using this one to have a better log view for each users in Metasploit.

createCrossIframe(name, id, width, height) : As pages can be modified in modules, Iframes can be created, 
and you need to use this provided function if you want XSSF_POST function to work. If you just want to create
an Iframe with no POST result, you don't need to use this function. See tabnapping.rb (l.118) and gmail.html 
if you want an example about how to create an iframe able to return a result to metasploit using a provided
javascript function.

clearTimeout(victim_loop); : Stop the victim loop. Please, stop a loop before using an other one on same victim.


#### ACCESIBLE JAVASCRIPT CONSTANTS ####
XSSF_SERVER : Attack server address. Can be used to load files, ... (Remember, if file needed is in an iframe, 
don't specify server adress, just '/')

xhr : XMLHttpRequest object. Use it to perform Ajax GET/POST Requests